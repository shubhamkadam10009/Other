**For this SQL project i will be answering 4 question from this data set**

# 1. Find out the top 3 Products (“productLine”) for each month that generated the highest profit.
Profit = ( Price per unit - Buying Price per Unit ) x No. of Units Ordered

Ans:
select *
from      (with report as (with s as   (select a.orderNumber,monthname(a.orderDate) as "Order_Date",c.productLine,(b.priceEach - c.buyPrice)*b.quantityOrdered as "Profit"
                                        from cr_orders a 
                                        join cr_orderdetails b 
                                        on a.orderNumber = b.orderNumber
                                        join cr_products c 
                                        on b.productCode= c.productCode)
                        select Order_Date,productLine,sum(Profit) as "profit"
                        from s
                        group by productLine,Order_Date)
            select *,rank() over(partition by Order_Date order by profit desc) as "Rank"
            from report) a 
where a.Rank < 4


# 2. Find the Month on Month growth in profit for each year.
MoM_growth is calculated as follows.
Mom = [Value(thismonth)/value(lastmonth) - 1] * 100%
For example,
MoM (Feb 2003) = ((Annual Revenue of Feb 2003/Annual Revenue of Jan 2003) - 1) * 100
Note: Please make sure that MoM is calculated for each year. 
Meaning, that ideally MoM growth of the first month of every year should be NULL as shown in the sample output below.

Ans : 
select b.Year,b.Monthname,b.profit,((profit/profit_last_month)-1)*100 as "MoM_Growth"
from(
        select a.Year,Monthname,profit,lag(profit,1,"N/A") over(partition by Year order by Year,Monthdate ) as "profit_last_month"
        from (with s as   (select a.orderNumber,year(a.orderDate) as "Year",month(a.orderDate)as"Monthdate",monthname(a.orderDate) as "Monthname",(b.priceEach - c.buyPrice)*b.quantityOrdered as "Profit"
                                    from cr_orders a 
                                    join cr_orderdetails b 
                                    on a.orderNumber = b.orderNumber
                                    join cr_products c 
                                    on b.productCode= c.productCode)
                select Year,Monthdate,Monthname,sum(Profit) as "profit"
                from s
                group by Monthdate,Monthname,Year) a ) b 

# 3. For each customer i.e (customerNumber) count the number of orders above and below the average order value.
“Average Order Value(AOV)” is calculated as below,
AOV = Total Revenue / Number of orders
Total Revenue is calculated as the sum of the revenue of each order.
Each order revenue is Price per unit * No. of Units.

Open Hint: AVG() OVER() Windows Function can be used here to calculate AOV.

Since you need to get the count of orders above and below the AOV. The final output looks like the below.
Conditions to get following details,

Order Above AVG = Actual Order Value >= AVG Order Value
Order Below AVG = Actual Order Value < AVG Order Value

Ans:
select x.customerNumber,y.contactFirstName,y.contactLastName,x.order_above_average,x.order_below_average
from (  select e.customerNumber,sum(order_above_avg) as "order_above_average",sum(order_below_avg) as "order_below_average"
        from   (select *, case 
                  when Revenue >= 3205.67 then 1 
                  else 0 
                  end as order_above_avg,
                  case 
                  when Revenue < 3205.67 then 1 
                  else 0 
                  end as order_below_avg
                from   (select a.customerNumber,a.orderNumber,b.productCode,(b.priceEach*b.quantityOrdered) as "Revenue"
                        from cr_orders a 
                        join cr_orderdetails b 
                        on a.orderNumber = b.orderNumber
                        join cr_products c 
                        on b.productCode= c.productCode) d) e 
        group by customerNumber
        order by customerNumber asc ) x 
Join cr_customers y 
on x.customerNumber = y.customerNumber


# 4. n the business, customer order the product in bulk and it is the utmost priority of the business to fulfill the order requirement as to when required. Hence a business has to keep checking their stock regularly to give uninterrupted delivery.
To make that happen, create a report as shown below to get the updated stock and status to check if we are running out of stock (or are we going to fulfill the next customer order?)
Consider the first row as an example where product code “S18_2248”. Its initial stock quantity was 540. After the first order i.e orderNumber 10100 from the customer i.e order quantity of 50, the updated stock value would be (540 - 50) 490. Now, the status needs to be updated based on the next order quantity, for example, the Next order is of quantity 32 and we have 490 products in stock hence we can easily serve the next order request (Status is Yes)

But if you look at the blue highlighted row then, in that case, “updatedStock” value is 12 and next order is of quantity 46 hence the status would No.

Ans:
select*,case
        when are_we_fulfill>=0 then "yes"
        else "no"
        end as "Status"
from (select*,(updatedstocks-lead(quant_ord,1,"null") over(partition by productCode)) as "are_we_fulfill"
from(select No,OrderDate,productCode,orderNumber,quantityInStock,quant_ord,product_sold,(quantityInStock-product_sold) as updatedstocks
from (select *,sum(quant_ord) over(partition by productcode order by No asc) as product_sold
from (select*,row_number() over(partition by productCode) as No
from(select d.orderdate,d.productCode,d.orderNumber,c.quantityInStock,d.quant_ord
from cr_products c
join (select a.OrderDate,b.productCode,b.orderNumber,sum(b.Quantityordered) as quant_ord
from cr_orders a
join cr_orderdetails b 
on a.orderNumber=b.orderNumber
group by a.OrderDate,b.productCode,b.orderNumber) d 
on c.productCode=d.productCode
)e )f)g)h)i

